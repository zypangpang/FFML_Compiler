0: PolicyList -> PolicyStatement I_A    PolicyList.node=I_A.syn
                                        I_A.inh=PolicyStatement.node
1: I_A -> PolicyStatement I_A   I_A.syn=I_A'.syn
                                I_A'.inh=[I_A.inh,PolicyStatement.node]
2: I_A -> #    I_A.syn=make_node('PolicyList',I_A.inh) # make_node(root_name,children_list)
3: I_B -> ConditionStatement    I_B.syn=ConditionStatement.node
4: I_B -> #    I_B.syn=None
5: PolicyStatement -> PolicyId EventStatement I_B ActionStatement ;    PolicyStatement.node=make_node('PolicyStatement',
                                                                               [PolicyId.syn,EventStatement.node,I_B.syn,
                                                                               ActionStatement.node])
6: PolicyId -> POLICYID [ String ]    PolicyId.syn=String.node
7: I_C -> LogicalOr SingleEvent I_C    I_C.syn=I_C'.syn
                                       I_C'.inh=[I_C.inh,SingleEvent.node]

8: I_C -> #    I_C.syn=make_node('EventStatement',I_C.inh)
9: EventStatement -> ON SingleEvent I_C    EventStatement.node=I_C.syn
                                           I_C.inh=SingleEvent.node
10: SingleEvent -> Channel EventList    SingleEvent.node=make_node('SingleEvent',[Channel.node,EventList.syn]
11: Channel -> ATM    Channel.node=make_node('ATM',[])
12: Channel -> CHQ    Channel.node=make_node('CHQ',[])
13: Channel -> CNP    Channel.node=make_node('CNP',[])
14: Channel -> CP     ...
15: Channel -> DD
16: Channel -> ONL
17: Channel -> OTH
18: EventList -> Sequence    EventList.syn=Sequence.node
19: EventList -> [ Event ]    EventList.syn=Event.node
20: I_D -> #    I_D.syn=None
21: I_D -> ( IntegerLiteral )    I_D.syn=IntegerLiteral.node
22: I_E -> #    I_E.syn=make_node('EventSeq',I_E.inh)
23: I_E -> , Event I_E    I_E.syn=I_E'.syn
                          I_E'.inh=[I_E.inh,Event.node]
24: Sequence -> SEQ I_D [ Event , Event I_E ]    Sequence.node=make_node('Sequence',[I_D.syn,I_E.syn])
                                                 I_E.inh=[Event1.node, Event2.node]
25: Instance -> <ID>    Instance.node=make_node('<ID>',[])
26: I_F -> LogicalOperator SingleCondition I_F    I_F.syn=I_F'.syn
                                                  I_F'.inh=[I_F.inh,LogicalOperator.syn,SingleCondition.node]
27: I_F -> #    I_F.syn=make_node('ConditionStatement',I_F.inh)
28: ConditionStatement -> IF SingleCondition I_F    ConditionStatement.node=I_F.syn
                                                    I_F.inh=SingleCondition.node
29: LogicalOperator -> LogicalAnd    LogicalOperator.syn=LogicalAnd.node
30: LogicalOperator -> LogicalOr     LogicalOperator.syn=LogicalOr.node
31: SingleCondition -> AdditiveExpression1 Comparison AdditiveExpression1    SingleCondition.node=make_node('SingleCondition',
                                                                                [AdditiveExpression1_1.node,Comparison.syn,
                                                                                AdditiveExpression1_2.node])
32: SingleCondition -> HistoryStatement Comparison AdditiveExpression1    SingleCondition.node=make_node('SingleCondition',
                                                                             [HistoryStatement.node,Comparison.syn,
                                                                             AdditiveExpression1.node])
33: I_G -> FactorExpression2    FactorExpression2.inh=I_G.inh
                                I_G.syn=FactorExpression2.syn
34: I_G -> #    I_G.syn=make_node('Factor',I_G.inh)
35: I_H -> AdditiveExpression2    AdditiveExpression2.inh=I_H.inh
                                  I_H.syn=AdditiveExpression2.syn
36: I_H -> #    I_H.syn=make_node('Addition',I_H.inh)
37: AdditiveExpression1 -> FactorExpression1 I_H   AdditiveExpression1.node=I_H.syn
                                                   I_H.inh=FactorExpression1.node
38: AdditiveExpression1 -> Query I_G I_H    AdditiveExpression1.node=I_H.syn
                                            I_G.inh=Query.node
                                            I_H.inh=I_G.syn
39: AdditiveExpression2 -> + FactorExpression1 I_H    I_H.inh=[AdditiveExpresion2.inh,'+',FactorExpression1.node]
                                                      AdditiveExpression2.syn=I_H.syn
40: AdditiveExpression2 -> - FactorExpression1 I_H    I_H.inh=[AdditiveExpresion2.inh,'-',FactorExpression1.node]
                                                      AdditiveExpression2.syn=I_H.syn
41: FactorExpression1 -> Factors I_G    FactorExpresion1.node=I_G.syn
                                        I_G.inh=Factors.syn
42: FactorExpression2 -> * Factors I_G    I_G.inh=[FactorExpression2.inh,'*',Factors.syn]
                                          FactorExpression2.syn=I_G.syn
43: FactorExpression2 -> / Factors I_G    I_G.inh=[FactorExpression2.inh,'/',Factors.syn]
                                          FactorExpression2.syn=I_G.syn
44: Factors -> Boolean    Factors.syn=Boolean.node
45: Factors -> EventParameter    Factors.syn=EventParameter.node
46: Factors -> IntegerLiteral    Factors.syn=IntegerLiteral.node
47: Factors -> String    Factors.syn=String.node
48: Factors -> ( AdditiveExpression1 )    Factors.syn=AdditiveExpression1.node
49: IntegerLiteral -> <DIGITS> F_A    IntegerLiteral.node=F_A.syn
                                      F_A.inh=<DIGITS>
50: Boolean -> FALSE    Boolean.node=make_node('Boolean','False',[])
51: Boolean -> TRUE     Boolean.node=make_node('Boolean',[])
52: String -> <STRING>  String.node=make_node('String',[])
53: Query -> QUERY StoredProcedure    Query.node=StoredProcedure.syn
54: StoredProcedure -> Instance ( Parameters )    StoredProcedure.syn=make_node('Query',[Instance.node,Parameters.node])
55: I_I -> #     I_I.syn=make_node('Params',I_I.inh)
56: I_I -> , ParamInput I_I    I_I.syn=I_I'.syn
                               I_I'.inh=[I_I.inh,ParamInput.syn]
57: Parameters -> ParamInput I_I    Parameters.node=I_I.syn
                                    I_I.inh=ParamInput.syn
58: ParamInput -> ChannelList    ParamInput.syn=ChannelList.node
59: ParamInput -> EventParameter    ParamInput.syn=EventParameter.node
60: ParamInput -> IntegerLiteral    ParamInput.syn=IntegerLiteral.node
61: I_J -> #    I_J.syn=make_node('ChannelList',i_J.inh)
62: I_J -> , Channel I_J    I_J.syn=I_J'.syn
                            I_J'.inh=[I_J.inh, Channel.node]
63: ChannelList -> Channel     ChannelList.node=Channel.node
64: ChannelList -> ( Channel I_J )    ChannelList.node=I_J.syn
                                      I_J.inh=Channel.node
65: HistoryStatement -> HISTORY HistInput    HistoryStatement.node=HistInput.syn
66: HistInput -> ( <DIGITS> ) [ AdditiveExpression1 Comparison AdditiveExpression1 ]    time=make_node('time',<DIGIT>,[])
                                                                                        condition=make_node('HistCond',
                                                                                            [AdditiveExpression1_1.node,
                                                                                            Comparison.node,AdditiveExpression1_2.node])
                                                                                        HistInput.syn=make_node('HistStatement',[time,condition])
67: I_K -> LogicalAnd Procedure I_K    I_K.syn=I_K'.syn
                                       I_K'.inh=[I_K.inh,Procedure.node]
68: I_K -> #    I_K.syn=make_node('Actions',I_K.inh)
69: ActionStatement -> THEN Procedure I_K    ActionStatment.node=I_K.syn
                                             I_K.inh=Procedure.node
70: I_L -> Parameters        I_L.syn=Parameters.node
71: I_L -> #    I_L.syn=None
72: Procedure -> Instance ( I_L )    Procedure.node=make_node('Procedure',[Instance.node,I_L.syn])
73: LogicalAnd -> AND    LogicalAnd.node=make_node("And",[])
74: LogicalOr -> OR    LogicalOr.node=make_node("Or",[])
75: Comparison -> !=    Comparison.node=make_node('Comp','!=',[])
76: Comparison -> <
77: Comparison -> <=
78: Comparison -> =
79: Comparison -> >
80: Comparison -> >=
81: EventParameter -> <ID> . <ID>     EventParameter.node=make_node("EventParam",'<ID>.<ID>',[])
82: Event -> <ID>    Event.node=make_node("Event",<ID>,[])
83: F_A -> #    F_A.syn=make_node(F_A.inh,[])
84: F_A -> . <DIGITS>    F_A.syn=make_node(''.join([F_A.inh,'.','<DIGIT>'),[])
